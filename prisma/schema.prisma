// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      Role     @default(CUSTOMER)
  phone     String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  cartItems     CartItem[]
  wishlistItems WishlistItem[]
  orders        Order[]
  transportBookings TransportBooking[]

  @@map("users")
}

model Product {
  id           String  @id @default(cuid())
  name         String
  description  String
  price        Float
  originalPrice Float?
  image        String
  category     String
  rating       Float   @default(0)
  reviews      Int     @default(0)
  inStock      Boolean @default(true)
  weight       String
  ingredients  String[]
  benefits     String[]
  isFeatured   Boolean @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  cartItems     CartItem[]
  wishlistItems WishlistItem[]
  orderItems    OrderItem[]

  @@map("products")
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart_items")
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlist_items")
}

model Order {
  id          String      @id @default(cuid())
  userId      String
  status      OrderStatus @default(PENDING)
  totalAmount   Float
  shippingAddress String
  paymentMethod   String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

enum Role {
  CUSTOMER
  ADMIN
  MANAGER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

model TransportBooking {
  id               String   @id @default(cuid())
  userId           String?
  phone            String?
  truckLabel       String
  weightViss       Int
  price            Int
  goodsDescription String
  origin           String
  destination      String
  pickupDate       DateTime?
  pickupTime       String?
  status           BookingStatus @default(PENDING)
  createdAt        DateTime @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("transport_bookings")
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}
